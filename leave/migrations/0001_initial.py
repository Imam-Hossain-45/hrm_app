# Generated by Django 2.2.1 on 2019-11-19 07:16

from django.db import migrations, models
import django.db.models.deletion
import leave.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('employees', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='LeaveGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=60, null=True, unique=True, verbose_name='Leave Group Name')),
                ('code', models.CharField(max_length=255, null=True, unique=True, verbose_name='Short Code')),
                ('description', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', max_length=10)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LeaveGroupSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('leave_credit', models.IntegerField(null=True)),
                ('minimum_enjoy', models.IntegerField(blank=True, null=True)),
                ('maximum_enjoy', models.IntegerField(blank=True, null=True)),
                ('leave_gap', models.BooleanField(default=False, verbose_name='Leave Gap restriction allowed')),
                ('minimum_gap', models.IntegerField(blank=True, null=True)),
                ('minimum_gap_unit', models.CharField(choices=[('day', 'Day'), ('week', 'Week'), ('month', 'Month'), ('year', 'Year')], default='day', max_length=20, null=True)),
                ('eligibility_based_on', models.CharField(choices=[('job_status_wise', 'Job Status wise'), ('time_wise', 'Time wise')], default='job_status_wise', max_length=50, null=True)),
                ('eligible_employee_in', models.CharField(blank=True, choices=[('probation_period', 'Probation Period'), ('confirmed_stage', 'Confirmed Stage')], default=None, max_length=50, null=True, verbose_name='When employee is in')),
                ('cannot_enjoy', models.IntegerField(blank=True, null=True, verbose_name='Employee cannot enjoy this leave within')),
                ('cannot_enjoy_unit', models.CharField(choices=[('day', 'Day'), ('week', 'Week'), ('month', 'Month'), ('year', 'Year')], default='day', max_length=20, null=True)),
                ('avail_based_on', models.CharField(choices=[('job_status_wise', 'Job Status wise'), ('time_wise', 'Time wise')], default='job_status_wise', max_length=50, null=True, verbose_name='Leave avail capability based on')),
                ('avail_employee_in', models.CharField(blank=True, choices=[('probation_period', 'Probation Period'), ('confirmed_stage', 'Confirmed Stage')], default=None, max_length=50, null=True, verbose_name='When employee is in')),
                ('can_enjoy', models.IntegerField(blank=True, null=True, verbose_name='Employee can enjoy this after')),
                ('can_enjoy_unit', models.CharField(choices=[('day', 'Day'), ('week', 'Week'), ('month', 'Month'), ('year', 'Year')], default='day', max_length=20, null=True)),
                ('timebase_credit', models.IntegerField(blank=True, null=True, verbose_name='For Time-based leave credit type')),
                ('timebase_credit_unit', models.CharField(blank=True, choices=[('day', 'Day'), ('week', 'Week'), ('month', 'Month'), ('year', 'Year')], default='month', max_length=20, null=True)),
                ('work_will_create', models.IntegerField(blank=True, null=True)),
                ('work_will_create_unit', models.CharField(blank=True, choices=[('day', 'Day'), ('week', 'Week'), ('month', 'Month'), ('year', 'Year')], default='day', max_length=20, null=True)),
                ('fractional_duration', models.IntegerField(blank=True, null=True, verbose_name='Leave Duration')),
                ('leave_group', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='group_settings', to='leave.LeaveGroup')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LeaveMaster',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, null=True, unique=True, verbose_name='Name of a Leave')),
                ('short_name', models.CharField(max_length=255, null=True, unique=True, verbose_name='Leave Short Name')),
                ('description', models.TextField(blank=True, null=True)),
                ('gender', models.CharField(choices=[('all', 'All'), ('male', 'Male'), ('female', 'Female')], default='all', max_length=6, null=True)),
                ('available_frequency_number', models.DecimalField(decimal_places=2, default='0.0', help_text='Leave available frequency', max_digits=10, null=True)),
                ('available_frequency_unit', models.CharField(choices=[('day', 'Day'), ('week', 'Week'), ('month', 'Month'), ('year', 'Year'), ('quarter', 'Quarter'), ('half_year', 'Half Year')], default='year', max_length=50, null=True, verbose_name='Available Frequency')),
                ('time_unit_basis', models.CharField(choices=[('hour', 'Hour'), ('day', 'Day'), ('week', 'Week'), ('month', 'Month')], default='day', max_length=50, verbose_name='Select Time Unit of this leave')),
                ('paid', models.BooleanField(blank=True, default=True, verbose_name='Paid Leave')),
                ('carry_forwardable', models.BooleanField(blank=True, default=False, verbose_name='This leave is being Carry Forwardable')),
                ('carry_forward_on', models.CharField(blank=True, choices=[('accumulated_balance', 'Accumulated Balance'), ('maximum_unit', 'Maximum Unit')], max_length=255, null=True)),
                ('carry_forward_leave_no', models.IntegerField(blank=True, null=True)),
                ('encashable', models.BooleanField(blank=True, default=False, verbose_name='This leave is being Encashable')),
                ('encashment_on', models.CharField(blank=True, choices=[('accumulated_balance', 'Accumulated Balance'), ('maximum_unit', 'Maximum Unit')], max_length=255, null=True)),
                ('encashment_leave_no', models.IntegerField(blank=True, null=True)),
                ('document_required', models.BooleanField(default=False, verbose_name='Documents Required when applying for leave')),
                ('tolerance_limit', models.IntegerField(blank=True, null=True)),
                ('tolerance_limit_unit', models.CharField(choices=[('hours', 'Hours'), ('days', 'Days'), ('months', 'Months')], default='days', max_length=50)),
                ('before_availing_leave', models.BooleanField(default=False, verbose_name='Application required before availing leave')),
                ('before_minimum', models.IntegerField(blank=True, null=True, verbose_name='Applying for leave before minimum')),
                ('before_minimum_unit', models.CharField(blank=True, choices=[('hours', 'Hours'), ('days', 'Days'), ('months', 'Months')], default='days', max_length=10)),
                ('before_maximum', models.IntegerField(blank=True, null=True, verbose_name='Applying for leave before maximum')),
                ('before_maximum_unit', models.CharField(blank=True, choices=[('hours', 'Hours'), ('days', 'Days'), ('months', 'Months')], default='days', max_length=10)),
                ('after_availing_leave', models.BooleanField(default=False, verbose_name='Can apply after availing leave')),
                ('after_maximum', models.IntegerField(blank=True, null=True, verbose_name='Applying for leave within maximum')),
                ('after_maximum_unit', models.CharField(blank=True, choices=[('hours', 'Hours'), ('days', 'Days'), ('months', 'Months')], default='days', max_length=10)),
                ('leave_credit_type', models.CharField(choices=[('fixed', 'Fixed'), ('timebase', 'Timebase')], default='fixed', help_text='Earned leave', max_length=10)),
                ('variable_with_time', models.BooleanField(default=False, verbose_name='Is the leave credit variable with time?')),
                ('round_of_time', models.CharField(blank=True, choices=[('floor', 'Floor'), ('ceiling', 'Ceiling'), ('nearest', 'Nearest')], help_text='Round of time for timebase leave credit type', max_length=10, null=True)),
                ('compensate_able', models.BooleanField(default=False, help_text='Is the leave is compensate able with other leave?')),
                ('partial_leave_allowed', models.BooleanField(default=False, help_text='Such a kind of leave that can be break within a day.')),
                ('fractional', models.BooleanField(default=False, help_text='Leave - that is a part of a day.', verbose_name='It a Fractional Leave')),
                ('fractional_time_unit', models.CharField(blank=True, choices=[('minutes', 'Minutes'), ('hours', 'Hours')], max_length=20, null=True)),
                ('sandwich_leave_allowed', models.BooleanField(null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', max_length=10)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PartialLeaveConverter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('partial_leave_hours', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('partial_leave_day', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('leave', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='partial_leave', related_query_name='partial_leave', to='leave.LeaveMaster')),
            ],
        ),
        migrations.CreateModel(
            name='LeaveRestriction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('can_enjoy', models.IntegerField(null=True)),
                ('within', models.IntegerField(null=True)),
                ('within_unit', models.CharField(choices=[('day', 'Day'), ('week', 'Week'), ('month', 'Month'), ('year', 'Year'), ('quarter', 'Quarter'), ('half_year', 'Half Year')], default='year', max_length=50)),
                ('leave_settings', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='leave_restriction', to='leave.LeaveGroupSettings')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LeaveRemaining',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('remaining_in_seconds', models.IntegerField(blank=True, null=True)),
                ('employee', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='employees.EmployeeIdentification')),
                ('leave', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='leave.LeaveMaster')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='leavegroupsettings',
            name='leave_name',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='leave_settings', to='leave.LeaveMaster'),
        ),
        migrations.AddField(
            model_name='leavegroup',
            name='leave',
            field=models.ManyToManyField(related_name='get_leave', related_query_name='get_leave', to='leave.LeaveMaster', verbose_name='Select Leave(s) to create the Group'),
        ),
        migrations.CreateModel(
            name='LeaveEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('start_date', models.DateField(null=True)),
                ('end_date', models.DateField(null=True)),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('reason_of_leave', models.TextField(null=True)),
                ('attachment', models.FileField(blank=True, null=True, upload_to='leave/', validators=[leave.validators.validate_file_extension])),
                ('status', models.CharField(blank=True, choices=[('pending', 'Pending'), ('declined', 'Declined'), ('approved', 'Approved')], default='pending', max_length=100, null=True)),
                ('employee', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='employee_name', to='employees.EmployeeIdentification')),
                ('leave_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='leave.LeaveMaster')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LeaveAvail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('credit_seconds', models.IntegerField(null=True)),
                ('start_date', models.DateField(null=True)),
                ('end_date', models.DateField(null=True)),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('notes', models.TextField(null=True)),
                ('status', models.BooleanField(default=True)),
                ('avail_leave', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='leave.LeaveMaster')),
                ('employee', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='employees.EmployeeIdentification')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LeaveApprovalComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('comment', models.TextField(null=True)),
                ('leave_entry', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='leave_entry', to='leave.LeaveEntry')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
